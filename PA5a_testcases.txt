/**************************/
/* valid_move()           */
/**************************/
// Test 1
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0 };
int move = 4;
// Should return 1

// Test 2
int board[ROWS][COLUMNS] = {
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 };
int move = 3;
// Should return 0

// Test 3
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0 };
int move = 9;
// Should return 0

// Test 4
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     1,2,1,2,1,2,1 };
int move = 6;
// Should return 1

// Test 5
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 };
int move = -1;
// Should return 0

// Test 6
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,2,0,0,1,2,1 
     0,2,0,0,1,2,1 
     0,2,0,0,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 };
int move = 6;
// Should return 1

// Test 7
int board[ROWS][COLUMNS] = {
     0,0,0,1,0,0,0,
     0,2,0,2,1,2,1 
     0,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 };
int move = 0;
// Should return 1

// Test 8
int board[ROWS][COLUMNS] = {
     0,0,2,0,0,0,0,
     0,0,1,0,0,0,0,
     0,0,2,0,0,0,0,
     0,0,1,0,0,0,0,
     0,0,2,0,0,0,0,
     1,2,1,2,1,2,1 };
int move = 3;
// Should return 1


/**************************/
/* add_move_board()       */
/**************************/
// Test 1
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0 };
int move = 4;
int player = 1;
// Should return 1

// Test 2
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0 };
int move = 9;
int player = 1;
// Should return 0

// Test 3
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,1,
     0,0,0,0,0,0,2,
     0,0,0,0,0,0,1,
     0,0,0,0,0,0,2,
     0,0,0,0,0,0,1 };
int move = 6;
int player = 2;
// Should return 1

// Test 4
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,1,
     0,0,0,0,0,0,2,
     0,0,0,0,0,0,1,
     0,0,0,0,0,0,2,
     1,2,1,2,1,2,1 };
int move = 2;
int player = 1;
// Should return 1

// Test 5
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,1,
     0,0,0,0,0,0,2,
     0,0,0,0,0,0,1,
     0,0,0,0,0,0,2,
     1,2,1,2,1,2,1 };
int move = 0;
int player = 1;
// Should return 1


/**************************/
/* computer_move()        */
/**************************/
// Test 1
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0 };
int player = 1;
int mode = 0;
// Should return a valid move

// Test 2
int board[ROWS][COLUMNS] = {
     0,2,1,2,1,2,1 
     0,2,1,2,1,2,1 
     0,2,1,2,1,2,1 
     0,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 };
int player = 1;
int mode = 0;
// Should return a valid move

// Test 3
int board[ROWS][COLUMNS] = {
     1,2,1,0,1,2,1 
     1,2,1,0,1,2,1 
     1,2,1,0,1,2,1 
     1,2,1,0,1,2,1 
     1,2,1,0,1,2,1 
     1,2,1,0,1,2,1 };
int player = 1;
int mode = 0;
// Should return a valid move

// Test 4
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 };
int player = 1;
int mode = 0;
// Should return a valid move

// Test 5
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     1,0,0,0,0,0,0,
     1,2,0,0,0,0,0,
     1,2,1,2,1,2,1 
     1,2,1,2,1,2,1 };
int player = 1;
int mode = 0;
// Should return a valid move


/**************************/
/* check_winning()        */
/**************************/
// Test 1
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     1,0,0,0,0,0,0,
     1,0,0,0,0,2,0,
     1,0,0,0,0,2,0,
     1,0,0,0,0,2,0 };
int last_move = 0;
// Should return 1

// Test 2
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     2,0,0,0,0,0,0,
     1,2,1,2,0,0,0,
     2,1,2,1,0,0,0,
     1,2,1,2,1,0,0 };
int last_move = 0;
// Should return 2

// Test 3
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,1,0,0,0,
     1,2,1,2,0,0,0,
     2,1,2,1,0,0,0,
     1,2,1,2,1,0,0 };
int last_move = 3;
// Should return 1

// Test 4
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     1,2,1,2,0,0,0,
     2,1,2,1,0,0,0,
     1,2,1,2,1,0,0 };
int last_move = 1;
// Should return 0

// Test 5
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     2,2,2,0,0,0,0,
     1,1,1,1,0,0,0 };
int last_move = 3;
// Should return 1

// Test 6
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     1,2,1,2,1,2,1,
     1,2,1,2,1,2,1,
     2,1,2,1,2,1,2,
     1,2,1,2,1,2,1 };
int last_move = 6;
// Should return 0

// Test 7
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     0,0,0,0,0,1,0,
     1,2,1,2,1,2,0,
     2,1,2,1,2,1,0,
     1,2,1,2,1,2,0 };
int last_move = 5;
// Should return 1

// Test 8
int board[ROWS][COLUMNS] = {
     0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,
     2,0,0,0,0,0,0,
     1,2,1,2,1,2,0,
     2,1,2,1,2,1,0,
     1,2,1,2,1,2,0 };
int last_move = 0;
// Should return 2


